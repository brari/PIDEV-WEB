<?php

namespace AnnuaireBundle\Entity;

use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * SubjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubjectRepository extends \Doctrine\ORM\EntityRepository
{   
    public function findAllArray($id_theme){        
        $qb = $this->createQueryBuilder('s')
            ->select('s', 'u', 't')
            ->leftJoin('s.iduser', 'u')
            ->leftJoin('s.theme', 't')
            ->where('s.theme = :id_theme')
            ->setParameter(':id_theme', $id_theme)
            ->getQuery();
        return $qb->getArrayResult();
    }
    
    public function findByUserInArray($user, $page = 1, $maxPerPage = 10){        
        $qb = $this->createQueryBuilder('s')
            ->select('s', 'u', 't')
            ->leftJoin('s.iduser', 'u')
            ->leftJoin('s.theme', 't')
            ->where('s.iduser = :user')
            ->setParameter(':user', $user)
            ->orderBy('s.id', 'ASC')
            ->setFirstResult(($page-1) * $maxPerPage)
            ->setMaxResults($maxPerPage);
//        $qb->setHydrationMode(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        return new Paginator($qb);
    }
    
    public function findInArray($page = 1, $maxPerPage = 10){        
        $qb = $this->createQueryBuilder('s')
            ->select('s', 'u', 't')
            ->leftJoin('s.iduser', 'u')
            ->leftJoin('s.theme', 't')
            ->orderBy('s.id', 'ASC')
            ->setFirstResult(($page-1) * $maxPerPage)
            ->setMaxResults($maxPerPage);
//        $qb->setHydrationMode(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        return new Paginator($qb);
    }
    
    
    public function findBySujetsParJr($date){
        $qb = $this->createQueryBuilder('s')
            ->select('s')
            ->where('s.date like :date')
            ->setParameter(':date', '%'.$date.'%')
            ->getQuery();
    return $qb->getResult();
    }
    
    public function findLastSubject($id){
        $qb = $this->createQueryBuilder('s')
            ->select('s')
            ->where('s.theme = :id')
            ->setParameter(':id', $id)
            ->orderBy('s.date', 'DESC')
            ->setMaxResults(1)
            ->getQuery();
    return $qb->getResult();       
    }
    
    public function findThemeForSubject($id){
        $qb = $this->createQueryBuilder('s')
                ->select('s')
                ->where('s.id = :id')
                ->setParameter(':id', $id)
                ->getQuery();
        return $qb->getResult();
    }
    
    public function switchState($id){
        $qb = $this->createQueryBuilder('s');
        $state = $this->getState($id);
        $qb->update();
                if ($state[0]["isdisabled"])
                    $qb->set('s.isdisabled', 'false');
                else
                    $qb->set('s.isdisabled', 'true');
                
                 $qb->where('s.id=:id')
                 ->setParameter('id', $id)
                 ->getQuery()
                 ->execute();
                if($state[0]["isdisabled"])
                    return 0;
                else
                    return 1;
    }
    
    public function switchStateBlock($id){
        $qb = $this->createQueryBuilder('s');
        $state = $this->getState($id);
        $qb->update();
                if ($state[0]["isdisabled"])
                    $qb->set('s.isdisabled', 'false')
                        ->set('s.isblocked', 'false');
                else
                    $qb->set('s.isdisabled', 'true')
                        ->set('s.isblocked', 'true');
                
                 $qb->where('s.id=:id')
                 ->setParameter('id', $id)
                 ->getQuery()
                 ->execute();
                if($state[0]["isdisabled"])
                    return 0;
                else
                    return 1;
    }
    
    public function getState($id)
    {        
        $qb = $this->createQueryBuilder('s')
                 ->select('s.isdisabled')
                 ->where('s.id=:id')
                 ->setParameter('id', $id);
        
        return $qb->getQuery()->getResult();
    }
    
    public function findByUser($user){
        $qb = $this->createQueryBuilder('s')
                ->where('s.iduser = :user')
                ->setParameter('user', $user)
                ->getQuery();
        return $qb->getResult();
    }
}
